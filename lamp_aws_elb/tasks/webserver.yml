---
- name: WebServer | Create WEB Security Group
  ec2_group:
    name: "{{ item.sg_name }}"
    description: "{{ item.sg_description }}"
    region: "{{ vpc_region }}" # Change the AWS region here
    vpc_id: "{{ vpc_id }}" # vpc is the resgister name, you can also set it manually
    state: present
    rules: "{{ item.sg_rules }}"
  with_items: "{{ web_security_groups }}"
  register: web_sg

- name: WebServer | Tag the WEB Security Group with a name
  ec2_tag:
    resource: "{{ item.group_id}}"
    region: "{{ vpc_region }}"
    state: present
    tags:
      Name: "{{ vpc_name }}-{{ item.item.sg_name }}"
  with_items: "{{ web_sg.results }}"

- ec2_instance_facts:
    region: "{{ vpc_region }}"
    filters: 
      "tag:Name": "{{ vpc_name }}_WEB_Instance"
      "tag:Role": "{{ server_role }}"
      "tag:Application": "{{ application }}"
      "instance-state-name": "stopped"
  register: stopped_web 

#- name: Power off web instances
#  debug: "msg={{ stopped_web.instances}}"

- name: WebServer | Poweron the WebServer Instance(s)
  ec2:
    region: "{{ vpc_region }}"
    instance_id: "{{ item.instance_id }}"
    state: running
    wait: True
  with_items: "{{ stopped_web.instances }}"

- ec2_instance_facts:
    region: "{{ vpc_region }}"
    filters: 
      "tag:Name": "{{ vpc_name }}_WEB_Instance"
      "tag:Role": "{{ server_role }}"
      "tag:Application": "{{ application }}"
      "instance-state-name": "running"
  register: existing_web 

- name: Existing web instances
  debug: "msg={{ existing_web.instances | map(attribute='instance_id') | list}}"

#- debug: "msg={{web_instance_count - existing_web_sg.instances|length }}"

- name: WebServer | Create the WebServer Instance(s)
  ec2:
    region: "{{ vpc_region }}"
    group: "{{ web_security_groups[0].sg_name }}"
    keypair: "{{ key_name }}"
    instance_type: "{{ web_instance_type }}"
    image: "{{ ami_id }}"
    vpc_subnet_id: "{{ web_subnet_id }}"
    assign_public_ip: True
    wait: True
    wait_timeout: 600
    count: "{{ web_instance_count - existing_web.instances|length}}"
    instance_tags:
      Name: "{{ vpc_name }}_WEB_Instance"
      Role: "{{ server_role }}"
      Application: "{{ application }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_volume_size }}"
        delete_on_termination: yes

  when: web_instance_count - existing_web.instances|length > 0
  
- ec2_instance_facts:
    region: "{{ vpc_region }}"
    filters: 
      "tag:Name": "{{ vpc_name }}_WEB_Instance"
      "tag:Role": "{{ server_role }}"
      "tag:Application": "{{ application }}"
      "instance-state-name": "running"
  register: existing_web 

- name: WebServer | Wait for SSH to come up
  wait_for:
    host: "{{ item.public_ip_address }}" 
    port: 22
    delay: 5
    timeout: 320
    state: started
  with_items: "{{ existing_web.instances}}"

- add_host:
    name: "{{ item.public_ip_address }}" 
    groups: tag_Role_webserver
  with_items: "{{ existing_web.instances}}"
